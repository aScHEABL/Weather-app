{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;AACe;AACf;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;;;;;;;;;;;;;;AC/Be;AACf;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACZe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,aAAa;AACxD;;AAEA;AACA;AACA;AACA;;;;;;UCzBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACN4C;AACkB;AAChB;AACF;;AAE5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,eAAe,0DAAa;AAC5B;AACA;AACA;AACA;AACA,8BAA8B,kEAAuB;AACrD;AACA,kCAAkC,2DAAc;AAChD;AACA,QAAQ,0DAAa;AACrB,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,kEAAuB;AACrD,8BAA8B,2DAAc;AAC5C;AACA;;AAEA,oB","sources":["webpack://weather-app/./src/geoLocationConvertAPI.js","webpack://weather-app/./src/stringChecker.js","webpack://weather-app/./src/userInterface.js","webpack://weather-app/./src/weatherDataAPI.js","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/make namespace object","webpack://weather-app/./src/index.js"],"sourcesContent":["\nexport default async function geoLocationConverterAPI(cityName) {\n  const errorMsg = document.querySelector(\"[data-error-msg]\");\n  try {\n    console.log(`Search for ${cityName}`)\n    const limitNumber = 1;\n    const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\n    const apiCall = \"http://api.openweathermap.org/geo/1.0/direct?q=\" +\n    cityName +\n    \"&limit=\" +\n    limitNumber +\n    \"&appid=\" +\n    apiKey;\n\n    const response = await fetch(apiCall, { mode: \"cors\"});\n    const data = await response.json();\n    \n    // Clone the object and assign to geoData\n    const geoData = structuredClone(data);\n    console.log(geoData)\n\n    // (geoData.length === 0) ? errorMsg.style.visibility = \"visible\" : geoData[0];\n    if (geoData.length === 0) {\n      errorMsg.style.visibility = \"visible\";\n      console.log(\"Did not find any result.\");\n      return false;\n    } else return geoData[0];\n  } catch (error) {\n    console.error(error)\n    errorMsg.style.visibility = \"visible\";\n  }\n}","export default function stringChecker(string) {\n    if (string.length === 0) {\n        console.log(\"Search input is empty.\");\n        return false\n    } else {\n    const whiteSpaceInTheMiddle = /\\b\\s+\\b/g;\n    return string = string.replaceAll(whiteSpaceInTheMiddle, \"+\");\n    }\n}","export default function userInterface(weatherData, geoData) {\n    console.log(weatherData);\n    console.log(geoData);\n    let dom_object = {\n        weatherInfoDesc: document.querySelector(\"[data-weather-info-description]\"),\n        weatherInfoCity: document.querySelector(\"[data-weather-info-city]\"),\n        weatherInfoDate: document.querySelector(\"[data-weather-info-time]\"),\n        weatherInfoTemp: document.querySelector(\"[data-weather-info-temp]\")\n    }\n    dom_object.weatherInfoDesc.textContent = weatherData.weather.description;\n    dom_object.weatherInfoCity.textContent = geoData.name;\n    dom_object.weatherInfoTemp.textContent = weatherData.main.temp;\n}","export default async function weatherDataAPI(geoData) {\n    // Convert coordinate from number to string\n    const coordinateLat = geoData.lat;\n    const coordinateLon = geoData.lon;\n    \n    const lang = \"en\";\n    const units = \"metric\";\n    const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\n    const apiCall = \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\n    coordinateLat +\n    \"&lon=\" + \n    coordinateLon + \n    \"&appid=\" + \n    apiKey +\n    \"&units=\" +\n    units +\n    \"&lang=\" +\n    lang;\n\n    const response = await fetch(apiCall, {mode: \"cors\"});\n    const data = await response.json();\n\n    // Clone the object and assign it to weatherData\n    const weatherData = structuredClone(data);\n    return weatherData;\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import stringChecker from \"./stringChecker\";\nimport geoLocationConverterAPI from \"./geoLocationConvertAPI\";\nimport weatherDataAPI from \"./weatherDataAPI\";\nimport userInterface from \"./userInterface\";\n\nconst searchInput_DOM = document.querySelector(\"[data-search-input]\");\nconst searchButton_DOM = document.querySelector(\"[data-search-button]\");\n\nsearchButton_DOM.addEventListener(\"click\", getWeatherData);\n\nasync function getWeatherData() {\n    console.log(\"Search button has been clicked.\");\n    let cityName = searchInput_DOM.value;\n    // Check if the search input is empty, if not then convert space to +\n    cityName = stringChecker(cityName);\n    // If cityName.length !== 0 search for the city, if cityName.length === 0 exit the function\n    if (cityName) {\n        // Get the geoData then retrieve the weatherData from the API\n        // If geoData is empty then exit the function\n        const geoData = await geoLocationConverterAPI(cityName);\n        if (!geoData) return;\n        const weatherData = await weatherDataAPI(geoData);\n        // Render UI from weatherData\n        userInterface(weatherData, geoData);\n    } else {\n        const errorMsg = document.querySelector(\"[data-error-msg]\");\n        errorMsg.style.visibility = \"visible\";\n        return;\n    }\n}\n\n// When the page is loaded, set the default weather to a specific city\nasync function initialWeather() {\n    console.log(\"Initializing the weahter for the default city.\")\n    const cityName = \"Calgary\";\n    const coordinates = await geoLocationConverterAPI(cityName);\n    const weatherData = await weatherDataAPI(coordinates);\n    console.log(weatherData);\n}\n\n// initialWeather();"],"names":[],"sourceRoot":""}