{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAe;AACf,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtBe;AACf;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;;;;;;UCzBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACN4C;AACkB;AAChB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa;AAC5B;AACA;AACA,kCAAkC,kEAAuB;AACzD,kCAAkC,2DAAc;AAChD;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kEAAuB;AACrD,8BAA8B,2DAAc;AAC5C;AACA;AACA;AACA,oB","sources":["webpack://weather-app/./src/geoLocationConvertAPI.js","webpack://weather-app/./src/stringChecker.js","webpack://weather-app/./src/weatherDataAPI.js","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/make namespace object","webpack://weather-app/./src/index.js"],"sourcesContent":["export default async function geoLocationConverterAPI(cityName) {\r\n  console.log(`Search for ${cityName}`)\r\n  const limitNumber = 1;\r\n  const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\r\n  const apiCall = \"http://api.openweathermap.org/geo/1.0/direct?q=\" +\r\n  cityName +\r\n  \"&limit=\" +\r\n  limitNumber +\r\n  \"&appid=\" +\r\n  apiKey;\r\n\r\n  const response = await fetch(apiCall, { mode: \"cors\"});\r\n  const data = await response.json();\r\n  let coordinates = {\r\n    lat: 0,\r\n    lon: 0\r\n  }\r\n\r\n  coordinates.lat = data[0].lat;\r\n  coordinates.lon = data[0].lon;\r\n\r\n  return coordinates;\r\n}","export default function stringChecker(string) {\r\n    if (string.length === 0) {\r\n        console.log(\"Search input is empty.\");\r\n        return false\r\n    } else {\r\n    const whiteSpaceInTheMiddle = /\\b\\s+\\b/g;\r\n    return string = string.replaceAll(whiteSpaceInTheMiddle, \"+\");\r\n    }\r\n}","export default async function weatherDataAPI(coordinates) {\r\n    // Convert coordinate from number to string\r\n    const coordinateLat = coordinates.lat;\r\n    const coordinateLon = coordinates.lon;\r\n    \r\n    const lang = \"en\";\r\n    const units = \"metric\";\r\n    const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\r\n    const apiCall = \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n    coordinateLat +\r\n    \"&lon=\" + \r\n    coordinateLon + \r\n    \"&appid=\" + \r\n    apiKey +\r\n    \"&units=\" +\r\n    units +\r\n    \"&lang=\" +\r\n    lang;\r\n\r\n    const response = await fetch(apiCall, {mode: \"cors\"});\r\n    const data = await response.json();\r\n\r\n    // Clone the object and assign it to weatherData\r\n    const weatherData = structuredClone(data);\r\n    return weatherData;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import stringChecker from \"./stringChecker\";\r\nimport geoLocationConverterAPI from \"./geoLocationConvertAPI\";\r\nimport weatherDataAPI from \"./weatherDataAPI\";\r\n\r\nconst searchInput_DOM = document.querySelector(\"[data-search-input]\");\r\nconst searchButton_DOM = document.querySelector(\"[data-search-button]\");\r\nlet cityName = \"\";\r\n\r\nsearchButton_DOM.addEventListener(\"click\", getWeatherData);\r\n\r\nasync function getWeatherData() {\r\n    console.log(\"Search button has been clicked.\");\r\n    cityName = searchInput_DOM.value;\r\n    //check if the search input is empty, if not then convert space to +\r\n    cityName = stringChecker(cityName);\r\n    // if boolean returns true, search for the city, if false exit the function\r\n    if (cityName) {\r\n        const coordinates = await geoLocationConverterAPI(cityName);\r\n        const weatherData = await weatherDataAPI(coordinates);\r\n        console.log(weatherData);\r\n    } else return\r\n}\r\n\r\n// When the page is loaded, set the default weather to a specific city\r\nasync function initialWeather() {\r\n    console.log(\"Initializing the weahter for the default city.\")\r\n    const cityName = \"Calgary\";\r\n    const coordinates = await geoLocationConverterAPI(cityName);\r\n    const weatherData = await weatherDataAPI(coordinates);\r\n    console.log(weatherData);\r\n}\r\n\r\n// initialWeather();"],"names":[],"sourceRoot":""}