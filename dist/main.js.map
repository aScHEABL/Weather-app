{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzBe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,aAAa;AACxD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC1BA;AACe;AACf;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,IAAI;AACJ;AACA;AACA;AACA;;;;;;;;;;;;;;AC/Be;AACf;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;;;;;;;;;;;;ACRe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UCrBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACN4C;AACkB;AACF;AACE;AAClB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAa;AAC5B;AACA;AACA;AACA;AACA,8BAA8B,kEAAuB;AACrD;AACA,yCAAyC,kEAAqB;AAC9D,0CAA0C,mEAAsB;AAChE;AACA,QAAQ,0DAAa;AACrB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kEAAuB;AACjD,qCAAqC,kEAAqB;AAC1D,IAAI,0DAAa;AACjB;AACA;AACA;AACA,oB","sources":["webpack://weather-app/./src/currentWeatherDataAPI.js","webpack://weather-app/./src/forecastWeatherDataAPI.js","webpack://weather-app/./src/geoLocationConvertAPI.js","webpack://weather-app/./src/stringChecker.js","webpack://weather-app/./src/userInterface.js","webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/define property getters","webpack://weather-app/webpack/runtime/hasOwnProperty shorthand","webpack://weather-app/webpack/runtime/make namespace object","webpack://weather-app/./src/index.js"],"sourcesContent":["export default async function currentweatherDataAPI(geoData) {\r\n    // Convert coordinate from number to string\r\n    const coordinateLat = geoData.lat;\r\n    const coordinateLon = geoData.lon;\r\n    \r\n    const lang = \"en\";\r\n    const units = \"metric\";\r\n    const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\r\n    const apiCall = \"https://api.openweathermap.org/data/2.5/weather?lat=\" +\r\n    coordinateLat +\r\n    \"&lon=\" + \r\n    coordinateLon + \r\n    \"&appid=\" + \r\n    apiKey +\r\n    \"&units=\" +\r\n    units +\r\n    \"&lang=\" +\r\n    lang;\r\n\r\n    const response = await fetch(apiCall, {mode: \"cors\"});\r\n    const data = await response.json();\r\n\r\n    // Clone the object and assign it to currentWeatherData\r\n    const currentWeatherData = structuredClone(data);\r\n    return currentWeatherData;\r\n}","export default async function forecastWeatherDataAPI(geoData) {\r\n    const lang = \"en\";\r\n    const units = \"metric\";\r\n    const forecastDays = \"7\";\r\n    const coordinateLat = geoData.lat;\r\n    const coordinateLon = geoData.lon;\r\n    const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\r\n    const apiCall = \"api.openweathermap.org/data/2.5/forecast/daily?lat=\" +\r\n    coordinateLat +\r\n    \"&lon=\" + \r\n    coordinateLon +\r\n    \"&cnt=\" + \r\n    forecastDays + \r\n    \"&units=\" + \r\n    units + \r\n    \"&lang=\" + \r\n    lang +\r\n    \"&appid=\" + \r\n    apiKey;\r\n\r\n    const response = await fetch(apiCall, {mode: \"cors\"});\r\n    const data = await response.json();\r\n\r\n    // Clone the object and assign it to forecastWeatherData\r\n    const forecastWeatherData = structuredClone(data);\r\n    return forecastWeatherData;\r\n}","\r\nexport default async function geoLocationConverterAPI(cityName) {\r\n  const errorMsg = document.querySelector(\"[data-error-msg]\");\r\n  try {\r\n    console.log(`Search for ${cityName}`)\r\n    const limitNumber = 1;\r\n    const apiKey = \"9b708ac24f65eeeba73e728c5a9e1d80\";\r\n    const apiCall = \"http://api.openweathermap.org/geo/1.0/direct?q=\" +\r\n    cityName +\r\n    \"&limit=\" +\r\n    limitNumber +\r\n    \"&appid=\" +\r\n    apiKey;\r\n\r\n    const response = await fetch(apiCall, { mode: \"cors\"});\r\n    const data = await response.json();\r\n    \r\n    // Clone the object and assign to geoData\r\n    const geoData = structuredClone(data);\r\n    // console.log(geoData)\r\n\r\n    // (geoData.length === 0) ? errorMsg.style.visibility = \"visible\" : geoData[0];\r\n    if (geoData.length === 0) {\r\n      errorMsg.style.visibility = \"visible\";\r\n      console.log(\"Did not find any result.\");\r\n      return false;\r\n    } else return geoData[0];\r\n  } catch (error) {\r\n    console.error(error)\r\n    errorMsg.style.visibility = \"visible\";\r\n  }\r\n}","export default function stringChecker(string) {\r\n    if (string.length === 0) {\r\n        console.log(\"Search input is empty.\");\r\n        return false\r\n    } else {\r\n    const whiteSpaceInTheMiddle = /\\b\\s+\\b/g;\r\n    return string = string.replaceAll(whiteSpaceInTheMiddle, \"+\");\r\n    }\r\n}","export default function userInterface(weatherData, geoData) { \r\n    // console.log(weatherData);\r\n    // console.log(geoData);\r\n    let dom_object = {\r\n        weatherInfoDesc: document.querySelector(\"[data-weather-info-description]\"),\r\n        weatherInfoCity: document.querySelector(\"[data-weather-info-city]\"),\r\n        weatherInfoDate: document.querySelector(\"[data-weather-info-time]\"),\r\n        weatherInfoTemp: document.querySelector(\"[data-weather-info-temp]\"),\r\n        weatherDetailsFeelLikeTemp: document.querySelector(\"[data-temperature-feel-like-value]\"),\r\n        weatherDetailsHumidity: document.querySelector(\"[data-weather-humidity-value]\"),\r\n        weatherDetailsChanceOfRain: document.querySelector(\"[data-weather-chance-of-rain]\"),\r\n        weatherDetailsWindSpeed: document.querySelector(\"[data-weather-wind-speed-value]\")\r\n    }\r\n    // Top left weather info\r\n    dom_object.weatherInfoDesc.textContent = weatherData.weather.description;\r\n    dom_object.weatherInfoCity.textContent = geoData.name;\r\n    dom_object.weatherInfoTemp.textContent = weatherData.main.temp;\r\n    // Top right weather details\r\n    dom_object.weatherDetailsFeelLikeTemp.textContent = weatherData.main.feels_like + \" Â°C\";\r\n    dom_object.weatherDetailsHumidity.textContent = weatherData.main.humidity + \" %\";\r\n    // dom_object.weatherDetailsChanceOfRain.textContent = weatherData\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import stringChecker from \"./stringChecker\";\r\nimport geoLocationConverterAPI from \"./geoLocationConvertAPI\";\r\nimport currentweatherDataAPI from \"./currentWeatherDataAPI\";\r\nimport forecastWeatherDataAPI from \"./forecastWeatherDataAPI\";\r\nimport userInterface from \"./userInterface\";\r\n\r\nconst searchInput_DOM = document.querySelector(\"[data-search-input]\");\r\nconst searchButton_DOM = document.querySelector(\"[data-search-button]\");\r\n\r\nsearchButton_DOM.addEventListener(\"click\", getWeatherData);\r\n\r\nasync function getWeatherData() {\r\n    console.log(\"Search button has been clicked.\");\r\n    let cityName = searchInput_DOM.value;\r\n    // Check if the search input is empty, if not then convert space to +\r\n    cityName = stringChecker(cityName);\r\n    // If cityName.length !== 0 search for the city, if cityName.length === 0 exit the function\r\n    if (cityName) {\r\n        // Get the geoData then retrieve the currentWeatherData from the API\r\n        // If geoData is empty then exit the function\r\n        const geoData = await geoLocationConverterAPI(cityName);\r\n        if (!geoData) return;\r\n        const currentWeatherData = await currentweatherDataAPI(geoData);\r\n        const forecastWeatherData = await forecastWeatherDataAPI(geoData);\r\n        // Render UI from weatherData\r\n        userInterface(currentWeatherData, geoData);\r\n    } else {\r\n        const errorMsg = document.querySelector(\"[data-error-msg]\");\r\n        errorMsg.style.visibility = \"visible\";\r\n        return;\r\n    }\r\n}\r\n\r\n// When the page is loaded, set the default weather to a specific city\r\nasync function defaultWeather() {\r\n    console.log(\"Initializing the weahter for the default city.\")\r\n    const cityName = \"Calgary\";\r\n    const geoData = await geoLocationConverterAPI(cityName);\r\n    const currentWeatherData = await currentweatherDataAPI(geoData);\r\n    userInterface(currentWeatherData, geoData);\r\n    console.log(currentWeatherData);\r\n}\r\n\r\n// defaultWeather();"],"names":[],"sourceRoot":""}